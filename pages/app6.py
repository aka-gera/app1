# -*- coding: utf-8 -*-
"""Untitled60.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/137CCbbeQyhIQovbwgtypzSFW_dGXfyfL
"""

# !pip install dash
# # !pip install dash==1.19.0
# !pip install jupyter_dash
# !pip install --upgrade plotly
# !pip install dash --upgrade
# !pip install dash_bootstrap_components

# Import required libraries
import pandas as pd
import dash
from dash import dcc
from dash import html
from dash import dcc, html, dash_table, Input, Output, State, callback
from dash.dependencies import Input, Output  
from dash import no_update 


from my_dash_class.my_files import dash_deco,plot_dash  
from my_dash_class.my_data import getData, DashToDataFrame,download
from my_dash_class.my_learning_alg import NN

 
barName = 'Neuro Net Classification'

dash.register_page(__name__, title=barName, name=barName,order=6)
 

# call class
dash_deco = dash_deco()
DashToDataFrame = DashToDataFrame()
download = download() 

shw = 0

dropdown_options_style = {'color': 'white', 'background-color' : 'gray'}

dropdown_options = [
    {'label': 'All Features', 'value': 'ALL', 'style': dropdown_options_style}
]

for col in range(100):
    dropdown_options.append({'label': 'Feature'+str(col), 'value': 'Feature'+str(col), 'style':  dropdown_options_style})

 


def layout():
    return html.Div(
    style=dash_deco.app_style,
    children=[
    html.Br(),
    html.Br(),
    html.Br(),

    html.H1('Dataset Classification and Prediction via Neural Network',
            style={'textAlign': 'center',
                'color': 'white',
                'background-color' : 'black',
                'font-size': 35
                }
            ),
    html.Br(),

    html.Br(),

    html.Br(),
    html.Div([
        html.H1("Upload the training data",
            style={'textAlign': 'center',
                        'color': 'white',
                        'background-color' : 'black',
                        'margin': 'auto',  # Center-align the dropdown horizontally
                        'font-size': 20
                        }
             ),
    dcc.Upload(
         id='upload-data-nn',
        children=html.Div([
            'Drag and Drop or ',
            html.A('Select File with extension .data, .csv, or .xls')
        ]),
        style={
            'display': 'flex',
            'justify-content': 'center',
            'width': '50%',
            'height': '50px',
            'margin': 'auto',  # Center-align the dropdown horizontally
            'color': 'black',
            'background-color' : 'grey',
            } ,
        multiple=True
    ), 
]),

    html.Br(),
    html.Div([
        html.H1("Upload the data to predict",
            style={'textAlign': 'center',
                        'color': 'white',
                        'background-color' : 'black',
                        'margin': 'auto',   
                        'font-size': 20
                        }
             ),
    dcc.Upload(
      id='upload-data2-nn',
        children=html.Div([
            'Drag and Drop or ',
            html.A('Select File with extension .data, .csv, or .xls')
        ]),
        style={
            'display': 'flex',
            'justify-content': 'center',
            'width': '50%',
            'height': '50px',
            'margin': 'auto', 
            'color': 'black',
            'background-color' : 'grey',
            } ,
        multiple=True
    ), 
]),

    html.Br(),
    html.Br(),
 
    ############################################################
    html.Div([
            html.Div([
                html.Div([
                  dcc.Dropdown(
                      id='site-dropdown1-nn',
                      options=dropdown_options,
                      value='ALL',
                      placeholder='Select a feature',
                      style=dash_deco.box_style,
                      searchable=True
                  ) ,
                  html.Div(id='output-graph1-nn') ,
                ]),
        ]),
    html.Br(),
    html.Br(),
    html.Div([
                html.H1("Enter the parameters",
                style={'textAlign': 'center',
                            'color': 'grey',
                            'background-color' : 'black',
                            'font-size': 30
                            }
                ),

    html.Hr(style={'border-color': 'white'}),
    html.Br(),
    html.Div([
        html.Label('epoq__________________________: '),   
        dcc.Input(
            id='input-epoq',
            type='number',  
            value=10,  # Initial value
            debounce=True   
        ),
    ]),
    html.Div([
        html.Label('Node Count_________________: '),   
        dcc.Input(
            id='input-num-nodes',
            type='text', 
            placeholder='Enter a comma-separated list',
            value='2,4',  # Initial value
            debounce=True   
        ),
    ]),
    html.Div([
        html.Label('Learning Rate_________________: '),   
        dcc.Input(
            id='input-lr',
            type='text', 
            placeholder='Enter a comma-separated list',
            value='0.01, 0.1' ,  # Initial value
            debounce=True   
        ),
    ]),

    html.Div([
        html.Label('Dropout Probability__________: '),   
        dcc.Input(
            id='input-dropout-prob',
            type='text', 
            placeholder='Enter a comma-separated list',
            value='0.05,0.1',  # Initial value
            debounce=True   
        ),
    ]),
        html.Div([
        html.Label('Batch Size_____________________: '),   
        dcc.Input(
            id='input-batch-size',
            type='text', 
            placeholder='Enter a comma-separated list',
            value='2,4',  # Initial value
            debounce=True   
        ),
    ]),
    ],
    style={'textAlign': 'center',
        'color': 'grey',
        'background-color' : 'black',
        'font-size': 20
        }
    ), 
 
        html.Div([
            dcc.Dropdown(
                id='site-dropdown-activation',
                options=[
                        {'label':  'relu',          'value': 'relu',          'style':  dropdown_options_style},
                        {'label': 'sigmoid',        'value': 'sigmoid',       'style':  dropdown_options_style},
                        {'label': 'softmax',        'value': 'softmax',       'style':  dropdown_options_style},
                        {'label': 'tanh',           'value': 'tanh',          'style':  dropdown_options_style},
                        {'label': 'exponential',    'value': 'exponential',   'style':  dropdown_options_style},
                        {'label': 'linear',         'value': 'linear',        'style':  dropdown_options_style}
                        ],
                value='relu',
                placeholder='Select a the activation function',
                style={
                    'width':'70%',
                    'padding':'3px',
                    'font-size': '20px',
                    'text-align-last' : 'center' ,
                    'margin': 'auto',  # Center-align the dropdown horizontally
                    'background-color' : 'black',
                    'color': 'black'
                    },
                searchable=True,
            ) ,
        html.Div([
            html.Div(id='output-graph2-nn', style={'width': '50%', 'display': 'inline-block'}),
            html.Div(id='output-graph3-nn', style={'width': '50%', 'display': 'inline-block'}),
        ]),
        ]),
     ]),
    html.Br(),
    html.Br(),
    html.Div(id='output-text-nn'),
    html.Br(),
    html.Br(),
    html.Div([
    html.H1("Download the predicted result based on the selected machine learning algorithm: ",
            style={'textAlign': 'center',
                        'color': 'white',
                        'background-color' : 'black',
                        'font-size': 20
                        }
             ),
    dcc.Download(id="download-button-nn"),
    html.Button("Download Prediction",
                id="btn-download-nn",
                style=dash_deco.default_style_buttom
                ),
        ],
    style={
        'display': 'flex',
        'justify-content': 'center',
        }
          ),
    html.Br(),
    html.Br(),
    html.Div([dash_deco.signature]),
    html.Br(),
 
])








@callback([
        Output('output-graph1-nn', 'children'),
        Output('output-graph2-nn', 'children'),
        Output('output-graph3-nn', 'children'),
        Output('output-text-nn', 'children'),
         Output("download-button-nn", "data"),
    ],
    [
        Input('upload-data-nn', 'contents'),
        Input('upload-data-nn', 'filename'),


        Input('upload-data2-nn', 'contents'),
        Input('upload-data2-nn', 'filename'),
        Input('site-dropdown1-nn', 'value'),
        Input('site-dropdown-activation', 'value'),

        Input('input-epoq'   , 'value'), 
        Input('input-num-nodes'    , 'value'),
        Input('input-lr'    , 'value'),  
        Input('input-dropout-prob'       , 'value'),
        Input('input-batch-size' , 'value'),

        Input('btn-download-nn', 'n_clicks'),
        ],
        prevent_initial_call=True
              )



def update_output(list_of_contents, 
                  list_of_names,
                  list_of_contents2, 
                  list_of_names2,
                  feature,
                  activation, 
                  epoch,
                  num_nodes,
                  lr,
                  dropout_prob,
                  batch_size,
                  n_clicks):
    if [list_of_contents,list_of_contents2] is not None:  

        df = DashToDataFrame.dash_to_df(list_of_contents, list_of_names)
        dfpred = DashToDataFrame.dash_to_df(list_of_contents2, list_of_names2)
 

        getDat = getData(df,dfpred)

        dff,X_train, X_test, y_train, y_test,X_pred, cmLabel,typOfVar,mapping = getDat.Algorithm()
        filtered_df = dff[dff.columns[:-1]]

        plot_d = plot_dash(filtered_df)

        if feature == 'ALL':
            figure1 =  dcc.Graph( figure = plot_d.plot_history_all_dash() )
        else:
            figure1 =  dcc.Graph( figure = plot_d.plot_history_dash(feature) )
 
 
        num_nodes    = DashToDataFrame.text_to_list_int(num_nodes)
        dropout_prob = DashToDataFrame.text_to_list_float(dropout_prob)
        lr           = DashToDataFrame.text_to_list_float(lr)
        batch_size   = DashToDataFrame.text_to_list_int(batch_size) 

        myNN = NN(X_train, X_test, y_train, y_test,X_pred,activation)
        model,scre =myNN.DNN(epoch,num_nodes,dropout_prob,lr,batch_size)
        y_pred,y_predpred =myNN.predict(model) 
 
        fig2 = dcc.Graph( figure = plot_d.plot_confusion_matrix_dash(y_test,y_pred,cmLabel,shw))
        fig3 = dcc.Graph( figure = plot_d.plot_classification_report_dash(y_test,y_pred,cmLabel,shw))
 
 
        txt_output = html.Div( ['The overall accuracy of the selected algorithm is ',f'{scre*100 :.2f}','%'],
            style=dash_deco.default_style
                )

        if df.shape[1] in typOfVar:
            y_predpred = pd.DataFrame(y_predpred).replace(mapping).values

        if n_clicks is None:
            butpred = dash.no_update   
        else:
            butpred =download.dfDownload(y_predpred)

        return  [  figure1,fig2,fig3,txt_output,butpred]

 
